@page "/fetchdata"
@inject HttpClient Http

<PageTitle>Weather forecast</PageTitle>

<MudText Typo="Typo.h3">Weather forecast</MudText>


<br />
<MudGrid Spacing="1" Justify="Justify.FlexStart">

    <MudItem xs="12">
        <MudText>This component demonstrates fetching data from the server.</MudText>
    </MudItem>
    <MudItem xs="12">

        @if (forecasts == null)
        {
            <MudText>Loading...</MudText>
        }
        else
        {
            <MudSimpleTable Style="overflow-x: auto;">
                <thead>
                    <tr>
                        <th>Date</th>
                        <th>Temp. (C)</th>
                        <th>Temp. (F)</th>
                        <th>Summary</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var forecast in forecasts)
                    {
                        <tr>
                            <td>@forecast.Date.ToShortDateString()</td>
                            <td>@forecast.TemperatureC</td>
                            <td>@forecast.TemperatureF</td>
                            <td>@forecast.Summary</td>
                        </tr>
                    }
                </tbody>
            </MudSimpleTable>
        }
    </MudItem>
</MudGrid>



@code {
    private WeatherForecast[]? forecasts;

    protected override async Task OnInitializedAsync()
    {
        forecasts = await Http.GetFromJsonAsync<WeatherForecast[]>("sample-data/weather.json");
    }

    public class WeatherForecast
    {
        public DateTime Date { get; set; }

        public int TemperatureC { get; set; }

        public string? Summary { get; set; }

        public int TemperatureF => 32 + (int)(TemperatureC / 0.5556);
    }
}
